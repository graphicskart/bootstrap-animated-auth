{"version":3,"sources":["components/Main.js","components/Login.js","components/Signup.js","App.js","serviceWorker.js","index.js"],"names":["Main","animateSignup","window","$","animate","left","css","animateLogin","react_default","a","createElement","Col","xs","className","Login_Login","Signup_Signup","Button","variant","onClick","this","Component","initialUser","email","password","Login","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChange","e","setState","user","objectSpread","state","defineProperty","target","name","value","onSubmit","preventDefault","FormGroup","FormControl","placeholder","type","fullname","Signup","App","Main_Main","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33262fd7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Col, Button } from \"react-bootstrap\";\nimport { Login, Signup } from \"../components\";\n\nexport default class Main extends Component {\n  animateSignup = () => {\n    window.$(\".main\").animate({ left: \"22.5%\" }, 300);\n    window.$(\".main\").animate({ left: \"30%\" }, 400);\n    window.$(\".login-form\").animate({ left: \"25%\" }, 300);\n    window.$(\".login-form\").css(\"visibility\", \"hidden\");\n\n    window.$(\".signup-form\").animate({ left: \"17%\" }, 300);\n    window.$(\".signup-form\").animate({ left: \"30%\" }, 400);\n    window.$(\".signup-form\").css(\"visibility\", \"visible\");\n  };\n\n  animateLogin = () => {\n    window.$(\".main\").animate({ left: \"77.5%\" }, 300);\n    window.$(\".main\").animate({ left: \"70%\" }, 400);\n    window.$(\".login-form\").animate({ left: \"83.5%\" }, 300);\n    window.$(\".login-form\").animate({ left: \"70%\" }, 400);\n    window.$(\".login-form\").css(\"visibility\", \"visible\");\n\n    window.$(\".signup-form\").animate({ left: \"75%\" }, 300);\n    window.$(\".signup-form\").css(\"visibility\", \"hidden\");\n  };\n\n  render() {\n    return (\n      <Col xs={12} className=\"box\">\n        <Col xs={12} className=\"main\" />\n        <Login />\n        <Signup />\n        <Col xs={12} className=\"login-msg\">\n          Have an account?\n        </Col>\n        <Col xs={12} className=\"signup-msg\">\n          Don't have an account?\n        </Col>\n        <Button\n          variant=\"success\"\n          className=\"login_btn\"\n          onClick={this.animateLogin}\n        >\n          LOGIN\n        </Button>\n        <Button\n          variant=\"success\"\n          className=\"signup_btn\"\n          onClick={this.animateSignup}\n        >\n          SIGNUP\n        </Button>\n      </Col>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Col, Row, FormGroup, FormControl, Button } from \"react-bootstrap\";\n\nconst initialUser = {\n  email: \"\",\n  password: \"\"\n};\n\nexport default class Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: { ...initialUser }\n    };\n  }\n\n  onChange = e => {\n    this.setState({\n      user: {\n        ...this.state.user,\n        [e.target.name]: e.target.value\n      }\n    });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n\n    this.setState({\n      user: { ...initialUser }\n    });\n  };\n\n  render() {\n    return (\n      <Col xs={12} className=\"login-form\">\n        <h1>LOGIN</h1>\n        <form onSubmit={this.onSubmit}>\n          <FormGroup>\n            <FormControl\n              placeholder=\"Email\"\n              name=\"email\"\n              value={this.state.user.email}\n              onChange={this.onChange}\n            />\n          </FormGroup>\n          <FormGroup>\n            <FormControl\n              type=\"password\"\n              placeholder=\"Password\"\n              name=\"password\"\n              value={this.state.user.password}\n              onChange={this.onChange}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Button variant=\"success\" className=\"float-right\" type=\"submit\">\n              Login\n            </Button>\n          </FormGroup>\n        </form>\n      </Col>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Col, Row, FormGroup, FormControl, Button } from \"react-bootstrap\";\n\nconst initialUser = {\n  fullname: \"\",\n  email: \"\",\n  password: \"\"\n};\nexport default class Signup extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: { ...initialUser }\n    };\n  }\n\n  onChange = e => {\n    this.setState({\n      user: {\n        ...this.state.user,\n        [e.target.name]: e.target.value\n      }\n    });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n\n    this.setState({\n      user: { ...initialUser }\n    });\n  };\n  render() {\n    return (\n      <Col xs={12} className=\"signup-form\">\n        <h1>SIGNUP</h1>\n        <form onSubmit={this.onSubmit}>\n          <FormGroup>\n            <FormControl\n              placeholder=\"Full Name\"\n              name=\"fullname\"\n              value={this.state.user.fullname}\n              onChange={this.onChange}\n            />\n          </FormGroup>\n          <FormGroup>\n            <FormControl\n              placeholder=\"Email\"\n              name=\"email\"\n              value={this.state.user.email}\n              onChange={this.onChange}\n            />\n          </FormGroup>\n          <FormGroup>\n            <FormControl\n              type=\"password\"\n              placeholder=\"Password\"\n              name=\"password\"\n              value={this.state.user.password}\n              onChange={this.onChange}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Button variant=\"success\" className=\"float-right\" type=\"submit\">\n              Signup\n            </Button>\n          </FormGroup>\n        </form>\n      </Col>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Col } from \"react-bootstrap\";\nimport { Main } from \"./components\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <Main />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}